name: Build and Release (Windows)

on:
  push:
    tags:
      - '*'

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache target directory
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          profile: minimal
          override: true

      - name: Install cargo-packager and dioxus-cli
        run: |
          cargo install cargo-packager dioxus-cli

      - name: Build and Package
        env:
          CARGO_PACKAGER_SIGN_PRIVATE_KEY: ${{ secrets.CARGO_PACKAGER_SIGN_PRIVATE_KEY }}
          CARGO_PACKAGER_SIGN_PRIVATE_KEY_PASSWORD: ${{ secrets.CARGO_PACKAGER_SIGN_PRIVATE_KEY_PASSWORD }}
        run: |
          cargo packager --release

      # ------------------------------------------
      # Create a release and upload artifacts
      # ------------------------------------------
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          # Usually you want to use the pushed tag as the release version
          tag_name: ${{ github.ref }}
          release_name: wallet-${{ github.ref }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      # Upload the .exe file
      - name: Upload EXE to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/wallet_${{ github.ref_name }}_x64-setup.exe
          asset_name: wallet_${{ github.ref_name }}_x64-setup.exe
          asset_content_type: application/octet-stream

      # Upload the .sig file
      - name: Upload Signature to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/wallet_${{ github.ref_name }}_x64-setup.exe.sig
          asset_name: wallet_${{ github.ref_name }}_x64-setup.exe.sig
          asset_content_type: application/octet-stream
