name: Build and Release (macOS)

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  build-macos:
    runs-on: macos-latest

    env:
      # Build constants
      TARGET: macos
      ARCH: x86_64
      VERSION: ${{ github.ref_name }}
      # AWS publish constants
      AWS_REGION: us-east-1
      S3_BUCKET_NAME: ore-wallet-xyz

    steps:
      # 1) Check out code
      - name: Check out code
        uses: actions/checkout@v3

      # 2) Cache Cargo registry
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # 3) Cache target directory
      - name: Cache target directory
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      # 4) Install Rust (stable)
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          profile: minimal
          override: true

      # 5) Install CLI tools
      - name: Install dioxus-cli and cargo-packager
        run: |
          cargo install cargo-packager@0.11.3 dioxus-cli@0.6.3

      # 6) Build & Package
      - name: Build and Package
        run: |
          dx bundle --platform desktop --release
          # This should produce a .app or .dmg depending on your config.
          # For example, you might see something like:
          # target/dx/wallet/bundle/macos/bundle/Wallet_x86_64.dmg
          #
          # Adjust paths/commands as needed for your projectâ€™s structure.

        ## # 7) (Optional) Code Sign
        ## #
        ## # On macOS, code signing typically requires a Developer ID certificate from Apple.
        ## # If you have that .p12 stored as a base64-encoded GitHub Secret, you can import it here.
        ## #
        ## # This is a generic example using native macOS codesign:
        ## - name: Import Apple Developer ID certificate
        ##   if: env.MAC_SIGN == 'true'
        ##   run: |
        ##     # Only run if you want to code sign with Apple certs.
        ##     # Replace the secret names with your actual secrets.

        ##     echo "${{ secrets.APPLE_DEVELOPER_ID_P12_BASE64 }}" | base64 --decode > signing_certificate.p12
        ##     security create-keychain -p "" build.keychain
        ##     security unlock-keychain -p "" build.keychain
        ##     security import signing_certificate.p12 \
        ##       -k build.keychain \
        ##       -P "${{ secrets.APPLE_DEVELOPER_ID_P12_PASSWORD }}" \
        ##       -T /usr/bin/codesign \
        ##       -T /usr/bin/productbuild
        ##     security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

        ## - name: Sign App (Optional)
        ##   if: env.MAC_SIGN == 'true'
        ##   run: |
        ##     # If you're using cargo-packager to do Mac code signing, you might do something like:
        ##     # cargo packager signer sign path/to/YourApp.app
        ##     #
        ##     # Or if you prefer direct Apple codesign:
        ##     # codesign --deep --force --verify --verbose \
        ##     #   --sign "Developer ID Application: Your Company (TEAMID)" \
        ##     #   path/to/YourApp.app

        ##     echo "Signing step placeholder - adjust for your actual signing approach."

        ## # 8) Configure AWS credentials & upload artifact
        ## - name: Configure AWS credentials
        ##   uses: aws-actions/configure-aws-credentials@v3
        ##   with:
        ##     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        ##     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        ##     aws-region: ${{ env.AWS_REGION }}

        ## - name: Upload DMG or ZIP to S3
        ##   run: |
        ##     # Example path - adjust for your actual build output
        ##     aws s3 cp \
        ##       "target/dx/wallet/bundle/macos/bundle/Wallet_${{ env.VERSION }}_x64.dmg" \
        ##       "s3://${{ env.S3_BUCKET_NAME }}/${{ env.TARGET }}/${{ env.ARCH }}/${{ env.VERSION }}/wallet_${{ env.VERSION }}_x64.dmg"

        ## - name: Print S3 download link
        ##   run: |
        ##     echo "Download DMG at: https://${{ env.S3_BUCKET_NAME }}.s3.amazonaws.com/${{ env.TARGET }}/${{ env.ARCH }}/${{ env.VERSION }}/wallet_${{ env.VERSION }}_x64.dmg"
