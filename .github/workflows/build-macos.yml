name: Build and Release (macOS)

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  build-macos:
    runs-on: macos-latest

    env:
      # Build constants
      TARGET: macos
      ARCH: x86_64
      VERSION: ${{ github.ref_name }}
      # AWS publish constants
      AWS_REGION: us-east-1
      S3_BUCKET_NAME: ore-wallet-xyz

    steps:
      # 1) Check out code
      - name: Check out code
        uses: actions/checkout@v3

      # 2) Cache Cargo registry
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # 3) Cache target directory
      - name: Cache target directory
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      # 4) Install Rust (stable)
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          profile: minimal
          override: true

      # 5) Install CLI tools
      - name: Install dioxus-cli and cargo-packager
        run: |
          cargo install cargo-packager@0.11.3 dioxus-cli@0.6.3

      # 6) Build & Package
      - name: Build and Package
        run: |
          dx bundle --platform desktop --package-types macos --release

      # 7) Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 8) Create tar.gz from the .app folder & upload to S3
      - name: Package and Upload
        run: |
          # Path to the .app bundle created by 'dx bundle'
          APP_DIR="/Users/runner/work/wallet/wallet/target/dx/wallet/bundle/macos/bundle/macos/Wallet.app"

          # Create a tar.gz archive of the .app directory
          tar -czf "Wallet_${{ env.VERSION }}.app.tar.gz" -C "$(dirname "$APP_DIR")" "$(basename "$APP_DIR")"

          # Upload that single tar.gz file to S3
          aws s3 cp \
            "Wallet_${{ env.VERSION }}.app.tar.gz" \
            "s3://${{ env.S3_BUCKET_NAME }}/${{ env.TARGET }}/${{ env.ARCH }}/${{ env.VERSION }}/wallet_${{ env.VERSION }}_x64.app.tar.gz"

      # 9) Print S3 download link
      - name: Print S3 download link
        run: |
          echo "Download macOS artifact at:"
          echo "https://${{ env.S3_BUCKET_NAME }}.s3.amazonaws.com/${{ env.TARGET }}/${{ env.ARCH }}/${{ env.VERSION }}/wallet_${{ env.VERSION }}_x64.app.tar.gz"
